include "../include/cricket_defs.spl";

procedure merge(a: LNode, b: LNode) returns (res: LNode)
  requires lseg(a, null) &*& slseg(b, null);
  ensures lseg(res, null);
{
  res := null;
  if (a == null) {
    return b;
  } else if (b == null) {
    return a;
  } else if (a.data <= b.data) {
    res := a;
    a := a.next;
  } else {
    res := b;
    b := b.next;
  }
  
  var last: LNode;
  last := res;

  while (a != null || b != null)
    invariant (last.next |-> a || last.next |-> b);
    invariant lseg(res, last, last.data) &*& lseg(a, null, last.data) &*& lseg(b, null, last.data);
  {
    if (a == null || b != null && a.data > b.data) {
      last.next := b;
      last := b;
      b := b.next;
    } else {
      last.next := a;
      last := a;
      a := a.next;
    }
  }

  return res;
}

procedure pull_strands(lst: LNode) returns (sorted: LNode, rest: LNode)
  requires lseg(lst, null) &*& lst != null;
  ensures lseg(sorted, null) &*& lseg(rest, null);
{
  var sorted_tail: LNode, curr: LNode, prv: LNode;
  rest := lst.next;
  curr := rest;
  prv := null;
  sorted := lst;
  sorted_tail := sorted;
  sorted_tail.next := null;
  while (curr != null)
    invariant lseg(curr, null);
    invariant lseg(rest, prv) &*& prv.next |-> curr || prv == null && rest == curr;
    invariant lseg(sorted, sorted_tail, sorted_tail.data);
    invariant sorted_tail.next |-> null;
  {
    if (curr.data >= sorted_tail.data) {
      var old_curr: LNode;
      old_curr := curr;
      curr := curr.next; 
      sorted_tail.next := old_curr;
      sorted_tail := old_curr;
      old_curr.next := null;
      if (rest == old_curr) {
        rest := curr;
      }
      if (prv != null) {
        prv.next := curr;
      }
    } else {
      prv := curr;
      curr := curr.next;
    }
  }
  return sorted, rest;
}

procedure strand_sort(lst: LNode) returns (res: LNode)
  requires lseg(lst, null);
  ensures slseg(res, null);
{
  var sorted: LNode;
  sorted := null;
  while (lst != null)
    invariant lseg(lst, null);
    invariant lseg(sorted, null);
  {
    var new_sorted: LNode;
    new_sorted, lst := pull_strands(lst);
    sorted := merge(sorted, new_sorted);
  }
  return sorted;
}
